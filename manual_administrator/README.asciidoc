= Care-O-bot 4 Manual

== Contents

. <<AdminManual,Administrator Manual>>
.. <<Setup robot pcs,Setup robot pcs>>
.. <<Setup internal robot network,Setup internal robot network>>
.. <<Install NFS,Install NFS>>
.. <<Enable passwordless login,Enable passwordless login>>
.. <<Setup NTP time synchronitation,Setup NTP time synchronitation>>
.. <<Install ROS and driver software,Install ROS and driver software>>
.. <<Setup CAN Ports,Setup CAN Ports>>
.. <<Setup hardware components, Setup hardware components>>
.. <<Create new users accounts, Create new users accounts>>
.. <<Install upstart job, Install upstart job>>
.. <<Network infrastructure for external access to the robot,Network infrastructure for external access to the robot>>
.. <<Calibration,Calibration>>
.. <<Backup and restore, Backup and restore>>


== [[AdminManual]] Administrator Manual

The following administrator manual requires some enhanced knowledge about:

* Linux/Ubuntu
* Network configuration
* Source code management with git
* ROS installation and usage

If you are missing some of this requirements or feel uncomfortable with what you are doing, please interrupt and ask somebody to help you before continuing.


=== [[Setup robot pcs]] Setup robot pcs

On all Care-O-bot 4 there are at least six pcs...


==== Install operating system

The first step is to install the operating system for each base, torso and sensorring pc. We are using Ubuntu as the main operating system for the robot. We recommend to install the Ubuntu 14.04 LTS (long term stable) 64-bit version because this version is well tested to work with the hardware. First please install Ubuntu (English version) creating a normal swap partition. Please choose robot as an admin account with a really safe password which should only be known to the local robot administrator.

The hostnames of the pcs should be:

* Base pc:
**  cob4-X-b1

* Torso pcs:
** cob4-X-t1
** cob4-X-t2
** cob4-X-t3

* Head pc:
** cob4-X-h1

==== Install basic toolsInstall ROS and driver software

In the case of the NUC pcs it is necessary install the Ethernet driver http://sourceforge.net/projects/e1000[e1000e] and activate on the BIOS that the NUc powers on by swichting on the robot. On the Bios setup

image:doc/screenshot_biosNUC.jpg[Bios menu]

Next we have to install some basic tools for the further setup of the pcs. In order to install the packages a internet connection is needed.

----
sudo apt-get update
sudo apt-get install vim tree gitg meld curl openjdk-6-jdk zsh terminator language-pack-de language-pack-en ipython
----

It is recommended to force Ubuntu to boot on a stuck boot menu modifiying the file +/etc/default/grub+, to override the recordfail timeout:

----
GRUB_TIMEOUT=10
GRUB_RECORDFAIL_TIMEOUT=$GRUB_TIMEOUT
----

Open a terminal and type +sudo update-grub+ to apply the changes you just made.

Allow the pc shutdown after press the power button, editing the existing /etc/acpi/powerbtn.sh file

----
sudo vi /etc/acpi/events/powerbtn
----

Add the line shutdown -h now as the first thing so it looks like:

----
#!/bin/sh
# /etc/acpi/powerbtn.sh
# Initiates a shutdown when the power putton has been
# pressed.

/sbin/shutdown -h now "Power button pressed"
exit 0

# leave the old code below (in case you want to revert!)
----



==== Setup ssh server

Install openssh server on all robot pcs

----
sudo apt-get install openssh-server
----

Let the server send a alive interval to clients to not get a broken pipe. Execute the following line on all robot pcs:

----
echo "ClientAliveInterval 60" | sudo tee -a /etc/ssh/sshd_config
----

==== Setup robot account for administration tasks

To facilitate the further setup we created a setup repository with some helpful scripts. To checkout the setup repository use:

----
mkdir ~/git
cd ~/git
git clone git://github.com/ipa320/setup_cob4.git
----

Allow robot user to execute sudo command without password. Add +robot ALL=(ALL) NOPASSWD: ALL+ to /etc/sudoers on all robot pcs

----
sudo visudo -f /etc/sudoers
----

==== [[RootUser]] Setup root local account

Enable root account on all robot pcs

----
ssh cob4-X-yZ
sudo passwd root
----

=== [[Setup internal robot network]] Setup internal robot network

Inside the robot there’s a router which connects the pcs and acts as gateway to
the building network. Setup the router with the following configuration.

The hostname of the router should be the name of the robot cob4-X and the IP address 10.4.X.1.

It is recommendable defined in the router static ip address for the pcs, using the MAC address for the registration. Where the IP addresses should be:


* cob4-X-b1 : +10.4.X.11+
* cob4-X-t1 : +10.4.X.21+
* cob4-X-t2 : +10.4.X.22+
* cob4-X-t3 : +10.4.X.23+
* cob4-X-h1 : +10.4.X.41+

We recommend remove the ubuntu network manager and configure the LAN port using the file +/etc/network/interfaces+

----
sudo apt-get remove network-manager
----

The +/etc/network/interfaces+  should looks:

----
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
----

Be sure that you are using the eth0 network port, you can rename your port modifying the udev rules (/etc/udev/rules.d/70-persistent-net.rules).


=== [[Install NFS]] Install NFS

After the network is configured properly we can setup a NFS between the robot pcs. cob4-X-b1 (base pc) will act as the NFS server and the others as NFS client.

In order to protect the pc’s access, we recommend create a local administrator user( <<RootUser, root user>>) in each pc, in this case if there is a problem in the sever (cob4-X-b1) or in the network this local user can access.


==== NFS configuration on cob4-X-b1 (server)

Install the NFS server package and create the NFS directory

----
sudo apt-get install nfs-kernel-server
sudo mkdir /u
----

Add the following line to /etc/fstab:

----
/home /u none bind 0 0
----

Now we can mount the drive

----
sudo mount /u
----

Activate +STATD+ in +/etc/default/nfs-common+ by changing th +NEED_STATD+ to yes

----
NEED_STADT=yes
----

Add the following line to +/etc/exports+:

----
/u *(rw,fsid=0,sync,no_subtree_check)
----

Change the home directory of the robot user from +/home/robot+ to +/u/robot+ in
the +/etc/passwd+ file.

After finishing you need to reboot the pc

----
sudo reboot
----

==== NFS configuration on torso, sensorring and head pcs (clients)

Install the NFS client package and create the NFS directory

----
sudo apt-get install nfs-kernel-server autofs
sudo mkdir /u
----

Activate +STATD+ in +/etc/default/nfs-common+ by changing the +NEED_STATD+ to
yes

----
NEED_STATD=yes
----

Edit +/etc/auto.master+ and add

----
/-  /etc/auto.direct
----

Create a new file /etc/auto.direct with the following line, IP is the parameter
that define your <<Setup internal robot network, robot network>>:

----
/u  -fstype=nfs4    10.4.X.11:/
----

Activate the NFS

----
sudo update-rc.d autofs defaults
sudo service autofs restart
sudo modprobe nfs
----

Change the home directory of the robot user from +/home/robot+ to +/u/robot+ in
the +/etc/passwd+ file.

After finishing you need to reboot the pc

----
sudo reboot
----

=== [[Enable passwordless login]] Enable passwordless login

Enable passwordless login to all robot pcs for robot user:

----
ssh-keygen
ssh-copy-id cob4-X-b1
ssh cob4-X-t1
ssh cob4-X-t2
ssh cob4-X-t3
ssh cob4-X-h1
----

For root user it is necessary allow login as root over ssh session, open the file +/etc/ssh/sshd_config+ and set +PermitRootLogin yes+ ,then enable passwordless login:
----
su root
ssh-keygen
ssh-copy-id cob4-X-b1
ssh cob4-X-t1
ssh cob4-X-t2
ssh cob4-X-t3
ssh cob4-X-h1
----

=== [[Setup NTP time synchronitation]] Setup NTP time synchronitation

Install the ntp package

----
sudo apt-get install ntp
----

==== NTP configuration on cob4-X-b1 (NTP server)

Edit +/etc/ntp.conf+, change the server to +0.pool.ntp.org+ and add the restrict
line, IP is the parameter that define your

<<Setup internal robot network,robot network>>.

----
server 0.pool.ntp.org
restrict 10.4.X.0 mask 255.255.255.0 nomodify notrap
----

==== NTP configuration on torso, sensorring and head pcs (NTP clients)

Edit +/etc/ntp.conf+, change the server to +cob4-X-b1+:

----
server 10.4.X.11
----

=== [[Install ROS and driver software]] Install ROS and driver software

For general instructions see http://wiki.ros.org/indigo/Installation/Ubuntu[Ubuntu install of ROS Indigo]

==== Install additional tools

----
sudo apt-get install openjdk-6-jdk zsh terminator
----

==== Setup your source.list

===== Ubuntu 14.04 (Trusty)

----
sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu trusty main" > /etc/apt/sources.list.d/ros-latest.list'
----

==== Set up your keys

----
wget http://packages.ros.org/ros.key -O - | sudo apt-key add -
----

==== Install ROS

----
sudo apt-get update
sudo apt-get install ros-indigo-rosbash python-ros-*
sudo apt-get install ros-indigo-care-o-bot-robot
----

==== Setup bash environment

We setup a special bash environment to be used on the Care-O-bot pcs. The environments differ on each pc. Copy the +cob.bash.bashrc.pcY+ to +/etc/cob.bash.bashrc+ on each pc, where Y is b, t, s or h depending of the component, b for base pc, t for torso pcs, s for sensorring pc and h for head pc.

----
sudo cp -f ~/git/setup_cob4/cob-pcs/cob.bash.bashrc.pcY /etc/cob.bash.bashrc
----

All users have a pre-configured bash environment too, therefore copy +user.bashrc+ to +∼/.bashrc+

----
cp ~/git/setup_cob4/cob-pcs/user.bashrc ~/.bashrc
----

The .bashrc file is preconfigured for +cob4-1+ and +ipa-apartment+, please change
the following lines to fit your robot configuration. At the bottom of your +.bashrc+
you have to define +ROS_MASTER_URI+ to be +http://cob4-X-b1:11311+, +ROBOT+ to
be +cob4-X+ and +ROBOT_ENV+ to point to your environment.

----
ROS_MASTER_URI=http://cob4-X-b1:11311
ROBOT=cob4-X
ROBOT_ENV=YOUR_ENVIRONMENT
----

=== Create overlays for stacks

It is recommended use the following folders structure, in order to use the default scripts and tools, a main folder +git+ on the home robot directory. Inside this folder should be the setup_cob4 repository and the catkin workspace +care-o-bot+

----
mkdir /u/robot/git/care-o-bot
mkdir /u/robot/git/care-o-bot/src
cd /u/robot/git/care-o-bot/src
source /opt/ros/indigo/setup.bash
catkin_init_workspace
cd /u/robot/git/care-o-bot
catkin_make
----

If the release version of the stacks are not working for you, you can install overlays for individuals stacks on the robot user account. It should typically only be necessary for two stacks, the cob_robots and the cob_calibration_data stacks. All other stacks should be used from their release version. If you need to modify a stack to work for you please send us a pull request to ipa320 on  http://www.github.com[Github].

----
cd /u/robot/git/care-o-bot/src
git clone https://github.com/ipa320/cob_robots
git clone https://github.com/ipa320/cob_calibration_data
----

=== [[Setup CAN Ports]] Setup CAN Ports

Add the following lines to +/etc/network/interfaces+

----
allow-hotplug can0
iface can0 can static
  bitrate 500000
  up ip link set $IFACE txqueuelen 15
----

=== [[Setup hardware components]] Setup hardware components

==== Previous installation

udev, pcan

==== Installation per component


[width="80%",cols="^3,^3,^3,^3",options="header"]
|=========================================================
| Component | PC | Driver | Required

| Laser scanner | cob4-X-b1 | <<sick_s300 , sick_s300>> | udev rules

| Flexisoft | cob4-X-b1 | <<sick_flexisoft , sick_flexisoft>> | -

| Base | cob4-X-b1 | <<base , base>> | Pcan driver

| Phidgets | cob4-X-b1 | <<cob_phidgets , cob_phidgets>> | http://wiki.ros.org/cob_phidgets[cob_phidgets]

| Joystick | cob4-X-b1 | <<Joystick, Joystick>> | udev rules

| Touchscreen | cob4-X-b1 | <<Touchscreen , Touchscreen>> | -

| Arms | cob4-X-t1 | <<ipa_canopen,ipa_canopen>> | Pcan driver

| Torso | cob4-X-t1 | <<ipa_canopen,ipa_canopen>> | Pcan driver

| Head | cob4-X-t1 | <<ipa_canopen,ipa_canopen>> | Pcan driver

|=========================================================



==== Installation per drivers


. [[Touchscreen]] Touchscreen

It is necessary download the driver, you can find it in the following link: http://www.cartft.com/support/drivers/TFT/tftdrivers/eGTouch_v2.5.2107.L-x.tar.gz[CarTFT]

The instructions to install the driver are:

----

tar -xf eGTouch_v2.5.2107.L-x.tar.gz
cd eGTouch_v2.5.2107.L-x
sudo ./setup.sh
sudo reboot

----

You can reconfigurate and calibrate the touch screen using the following scripts:

----

chmod +x eGTouch_v2.5.2107.L-x/eGTouch64/ eGTouch64withX/*
cd eGTouch_v2.5.2107.L-x/eGTouch64/ eGTouch64withX
./eCalib
./eGTouchU

----

=== [[Create new users accounts]] Create new users accounts

After finishing the preparation step you can add new users. On cob4-X-b1 and with administration rights you can use the following instruction:

----

cobadduser +newUserName+

----

=== [[Install upstart job]] Install upstart job

It is recommended install robot.launch as Linux upstart job, the drivers will be launched automatically on startup base pc.

On cob4-X-b1 , execute the following script:

----

/u/robot/git/setup_cob4/upstart/upstart_install.sh

----

In order to allow the non-root users execute the cob-start and cob-stop commands, modify the sudo rights adding the following lines to +/etc/sudoers+(to edit this file use the command +sudo visudo+) on all robot pcs:

----

%users ALL=NOPASSWD:/usr/sbin/cob-start
%users ALL=NOPASSWD:/usr/sbin/cob-stop
%users ALL=NOPASSWD:/usr/sbin/cob-shutdown

----


=== [[Network infrastructure for external access to the robot]] Network infrastructure for external access to the robot

For the robot internal network setup please refer to section  <<Setup internal robot network,Setup internal robot network>>

Make sure you have name resolution and access to the robot pcs from your external pc. To satisfy the ROS communication you need a full DNS and reverse DNS name lockup for all machines. Check it from your remote pc with

----
ping 10.4.X.1
ping cob4-X-b1
----

and the other way round try to ping your remote pc from one of the robot pcs

----

ping your_ip_address
ping your_hostname

----

If ping and DNS is not setup correctly, there are multiple ways to enable access and name resolution.

==== Setting up your building network (recommended)

Setting up you building network to enable dns and port forwarding to the internal network.

==== Manual setup for each remote pc

You can setup a route to the internal network addresses. Please change the robot name and your network device to fit your settings. E.g. for connecting to cob4-X on eth0

----

sudo route add -net 10.4.X.0 netmask 255.255.255.0 gw cob4−X dev eth0

----

For connecting to cob4-X on wlan0

----

sudo route add -net 10.4.X.0 netmask 255.255.255.0 gw cob4−X dev eth0

----

For name resolution you will probably have to edit the file /etc/hosts on the robot pcs as well as on the remote pc. Therefore add the following addresses to the /etc/hosts of your remote pc.

----

10.4.X.11 cob4-X-b1
10.4.X.21 cob4-X-t1
10.4.X.22 cob4-X-t2
10.4.X.23 cob4-X-t3
10.4.X.41 cob4-X-h1

----

Add your ip adress and hostname to the /etc/hosts of all robot pcs.

=== [[Calibration]] Calibration
tbd

=== [[Backup and restore]] Backup and restore

==== Backup the entire system

We recommended to backup your system when you have a stable software version, e.g. all hardware drivers setup and running. You can backup the whole disks of your robot to an external hard disk using the tool dd.
Be sure hat the external device hat enough free space as an ext4 partition, you can format it using gparted. With the new partition mounted in your system execute the following command:

----

sudo dd i f =/dev /sdaX o f =/dev /sdbY

----

where /dev/sdaX is the local partition where ubuntu is installed and /dev/sdbY is the partition where your external device is mounted. With this command you copy the whole partition, this step will take several hours depending on the disk size.


==== Restore the entire system

With the following instructions you can restore your system to a previous backed up version. However you should be aware of that if backing up and restoring fails you will need to setup your system from scratch. So we only reccomend to restore your system if nothing else helps to get the system up and running again.
If you have a backup on an external hard disk you can use a CD or USB stick with live linux to restore the system with the following command:

----

sudo dd i f =/dev /sdbY o f =/dev /sdaX

----

where /dev/sdbY is the partition where your external device is mounted and /dev/sdaX is the local partition where you want to restore ubuntu to.




