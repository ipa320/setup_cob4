#!/bin/bash
blue='\e[1;34m'
black='\e[0;30m'
grey='\e[0;37m'
red='\e[0;31m'
green='\e[1;32m'

standard_user="robot"

ProgName=$(basename $0)
upstart_file_path="/etc/ros/cob.yaml"

#### retrieve client_list variables
source /u/robot/git/setup_cob4/helper_client_list.sh

get_user_list(){
  pos=0
  for i in $client_list_hostnames; do
    #ssh $i "ps aux | grep 'tmux new'" > /tmp/$i.users
    #current_users=$(sed '/grep/d' /tmp/$i.users | awk '{ print $1 }'| sort | uniq)
    #command="ssh $i "ps aux | grep 'tmux new'" |  sed '/grep/d' | awk '{ print $1 }'|  sort | uniq"
    current_users=$(su $standard_user -l -c "ssh $i 'ps aux | grep tmux '" |  sed '/grep/d' | awk '{ print $1 }'| sort | uniq)
    users_list[$pos]=$current_users
    pos=$((pos+1))
  done
}

get_pid(){
  pid="$1"
  for child in $(ps -o pid  --no-headers --ppid $pid); do
    [[ "$$" -eq "$child" ]]
    echo $(ps -o pid= -p $child)
  done
}

parse_yaml(){
  local prefix=$2
  local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
  sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
  awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s=%s\n",vn,$2,$3)
      }
   }' > /tmp/cob
}

list_sessions(){
  get_user_list
  pos=0
  for i in $client_list_hostnames; do
    for u in ${users_list[$pos]}; do
      sessions_list=""
      num=0
      sessions_list=$(su $u -l -c "ssh $i 'tmux list-sessions'" | awk '{print $1}')
      ret=${PIPESTATUS[0]}
      if [ $ret != 0 ] ; then
        break
      else
        for session_name in $sessions_list; do
          num=$((num+1))
          sessions[$num]=${session_name%%:*}
        done
        for n in $(seq 1 $num); do
          pid_command='tmux list-panes -s -F "#{pane_pid}" -t '
          quom="'"
          ssh_command="ssh $i $quom$pid_command${sessions[$n]}$quom"
          tmux_pid=$(su $u -l -c "$ssh_command")
          unset PID
          PID=$(get_pid $tmux_pid)
          if [ -z "$PID" ]; then
            command=""
          else
            command=$(ps -p $PID -o args)
          fi
          echo "${sessions[$n]}"
          if ${verbose}; then
            echo "  pc: $i"
            echo "  user: $u"
            echo "  PID: $PID"
            echo "  command: ${command#* }"
          fi
        done
      fi
    done
    pos=$((pos+1))
  done
}

find_session(){
  SESSION_NAME="$1"
  get_user_list
  pos=0
  for i in $client_list_hostnames; do
    for u in ${users_list[$pos]}; do
      sessions_list=$(su $u -l -c "ssh $i 'tmux list-sessions' 2>&1")
      ret=${PIPESTATUS[0]}
      if [ $ret != 0 ] ; then
        false
      else
        sessions_list="${sessions_list//:}"
        if [ "${sessions_list/$SESSION_NAME}" != "$sessions_list" ]; then
          where_session=$i
          who_session=$u
          session_found=true
          break
        fi
      fi
    done
    pos=$((pos+1))
  done
}

stop_session(){
  arg_session_stop="$1"
  echo -e "${red}===========================================${NC}"
  echo "              Stopping $arg_session_stop        "
  echo -e "${red}===========================================${NC}"
  echo -e "${grey}\n ${NC}"
  find_session $arg_session_stop
  PC=$where_session
  USER=$who_session
  if [ -z "$PC" ]; then
    echo "$arg_session_stop not found... aborting"
    exit
  fi
  pid_command='tmux list-panes -s -F "#{pane_pid}" -t '
  quom="'"
  ssh_command="ssh $PC $quom$pid_command$arg_session_stop$quom"
  tmux_pid=$(su $USER -l -c "$ssh_command")
  if [ -z "$tmux_pid" ]; then
    echo "$arg_session_stop not active"
    exit
  fi
  PID=$(get_pid $tmux_pid)
  if [ -z "$PID" ]; then
    command=" "
  else
    command=$(ps -p $PID -o args)
  fi
  command=${command#* }

  if [[ $command == *'roscore'* ]] && $lock_core; then
    echo -e "${red}Ignoring roscore, to kill the core please use the command: cob-command stop_core${NC}"
    echo -e "${grey}\n ${NC}"
  elif [[ $command == *'slack'* ]] && $lock_slack; then
    echo -e "${red}Ignoring slack, to kill the slack-session please use the command: cob-command stop_slack${NC}"
    echo -e "${grey}\n ${NC}"
  else
    su $USER -l -c "ssh $PC 'tmux send -t $arg_session_stop C-c'"
    if [ ! -z "$PID" ]; then
      while su $standard_user -l -c "ssh $PC stat /proc/$PID \> /dev/null 2\>\&1 "; do echo "still waiting for $arg_session_stop to stop (PID $PID)" && sleep 1; done
    fi
    su $USER -l -c "ssh $PC 'tmux kill-session -t $arg_session_stop'"
  fi

}

start_session(){
  if [ -z "$arg_session_name" ]; then
    echo "SYNTAX ERROR: please check your " $upstart_file_path ":session name not defined"
    echo " "
    exit
  fi
  if [ -z "$arg_command" ]; then
    echo "SYNTAX ERROR: please check your " $upstart_file_path ":command not defined"
    echo " "
    exit
  fi
  if [ -z "$arg_pc" ]; then
    arg_pc="localhost"
  fi
  if [ -z "$arg_user" ]; then
    arg_user="robot"
  fi

  echo -e "${green}===========================================${NC}"
  echo "              Starting $arg_session_name        "
  echo "User: $arg_user"
  echo "Pc: $arg_pc"
  echo "Command: $arg_command"
  echo "Pre condition: $arg_pre_condition"
  echo -e "${green}===========================================${NC}"
  echo -e "${grey}\n ${NC}"
  unset session_found
  find_session $arg_session_name > /dev/null
  if ! [[ $arg_command == *'ros'* ]]; then
    echo -e "${red}ERROR: only ros commands are allow${NC}"
    echo -e "${grey} ${NC}"
  elif ! [ -z "$session_found" ]; then
    echo -e "${red}ERROR: $arg_session_name session already exists${NC}"
    echo -e "${grey} ${NC}"
  else
    if ! [ -z $arg_pre_condition ]; then
      arg_command=$arg_pre_condition' && '$arg_command
    fi
    send_command=${arg_command//" "/"\ "}
    send_command=${send_command//"&"/"\&"}
    send_command=${send_command//";"/"\;"}
    send_command=${send_command//">"/"\>"}
    su $arg_user -l -c "ssh $arg_pc 'tmux -u new -d -s $arg_session_name'"
    su $arg_user -l -c "ssh $arg_pc 'tmux -u send -t $arg_session_name $send_command ENTER'"
  fi
}

sub_help(){
  echo "Usage: $ProgName command -options <arguments>\n"
  echo "Commands:"
  echo "    ls [-v]"
  echo "    find <session_name>"
  echo "    start [<file path>]"
  echo "    stop [-a] [<session_name>]"
  echo "    stop_core"
  echo "    stop_slack"
  echo "    reboot"
  echo ""
}

sub_ls(){
  echo -e "${blue}===========================================${NC}"
  echo "Listing sessions..."
  echo -e "${blue}===========================================${NC}"
  echo -e "${grey}\n ${NC}"
  list_sessions
}

sub_find(){
  echo -e "${blue}===========================================${NC}"
  echo "Finding sessions..."
  echo -e "${blue}===========================================${NC}"
  echo -e "${grey}\n ${NC}"
  if [ -z "$arg_session_name" ]; then
      echo "no session name defined"
      echo -e $usage
      exit
  fi
  find_session $arg_session_name
  echo "session: $arg_session_name"
  echo "pc: $where_session"
  echo "user: $who_session"
}

sub_start(){
  echo -e "${blue}===========================================${NC}"
  echo "Starting sessions..."
  echo -e "${blue}===========================================${NC}"
  echo -e "${grey}\n ${NC}"
  arg_upstart_file_path=$1
  if ! [ -z "$arg_upstart_file_path" ]; then
    upstart_file_path=$arg_upstart_file_path
  fi
  echo "Reading file "$upstart_file_path"..."
  parse_yaml $upstart_file_path
  IFS="="
  num=0
  while read -r name value ; do
    if [[ $name == *'session_name' ]]; then
      num=$((num+1))
      sessions[$num]=$value
    fi
  done < /tmp/cob
  for ((n=1; n <= $num; n++)); do
    arg_session_name=${sessions[$n]}
    IFS="="
    while read -r name value
    do
      if [[ $name == ${sessions[$n]}'_command' ]]; then
        arg_command=$value
      fi
      if [[ $name == ${sessions[$n]}'_user' ]]; then
        arg_user=$value
      fi
      if [[ $name == ${sessions[$n]}'_pc' ]]; then
        arg_pc=$value
      fi
      if [[ $name == ${sessions[$n]}'_pre_condition' ]]; then
        arg_pre_condition=$value
      fi
    done < /tmp/cob
    start_session
  done
}

sub_stop(){
  echo -e "${blue}===========================================${NC}"
  echo "Stopping sessions..."
  echo -e "${blue}===========================================${NC}"
  echo -e "${grey}\n ${NC}"
  arg_session_name=$1
  if ${all}; then
    sessions_list=$(list_sessions)
    for i in $sessions_list; do
      stop_session $i
    done
  elif ! [ -z "$arg_session_name" ]; then
    stop_session $arg_session_name
  else
    sessions_list=$(list_sessions)
    for session_name in $sessions_list; do
      num=$((num+1))
      sessions[$num]=$session_name
    done

    echo -e "${blue}===========================================${NC}"
    echo -e "${blue}===========================================${NC}"
    echo "              Stop Session Menu                 "
    echo -e "${blue}===========================================${NC}"
    echo -e "${blue}===========================================${NC}"
    echo -e "${grey}\n ${NC}"
    for i in $(seq 1 $num); do
      echo "$i: ${sessions[i]}"
    done
    read -p "Please select a session number or 'all' to kill all the active sessions: " choice
    if ! [[ "$choice" =~ ^[1-$num]+$ || "$choice" == "all" ]]; then
      echo -e "========> $choice not valid , please choose a number session between 1-$num"
      exit
    fi
    lock_core=true
    if [[ "$choice" == "all" ]]; then
      all=true
      for i in $sessions_list; do
        stop_session $i
      done
    else
      echo -e "========> $choice - Stopping session ${sessions[$choice]}"
      stop_session ${sessions[$choice]}
    fi
  fi
  echo -e "${red}===========================================${NC}"
  echo "              Calling rosnode cleanup               "
  echo -e "${red}===========================================${NC}"
  echo -e "${grey}\n ${NC}"
  sleep 1 # give tmux sessions and rosnodes a little time to properly shutdown before calling rosnode cleanup
  su $standard_user -l -c "source /opt/ros/myrosdistro/setup.bash && echo 'y' | rosnode cleanup"
}

sub_stop_core(){
  echo -e "${blue}===========================================${NC}"
  echo "Stopping the core..."
  echo -e "${blue}===========================================${NC}"
  echo -e "${grey}\n ${NC}"
  killall -9 roscore
  killall -9 rosmaster
  wait $!
  lock_core=false
  stop_session roscore
}

sub_stop_slack(){
  echo -e "${blue}===========================================${NC}"
  echo "Stopping slack..."
  echo -e "${blue}===========================================${NC}"
  echo -e "${grey}\n ${NC}"
  killall -9 slack
  wait $!
  lock_slack=false
  stop_session slack
}

sub_reboot(){
  echo -e "${blue}===========================================${NC}"
  echo "Rebooting the robot..."
  echo -e "${blue}===========================================${NC}"
  echo -e "${grey}\n ${NC}"
  cob-shutdown
}

sub_start_gui(){
  echo -e "${blue}===========================================${NC}"
  echo "Starting VM..."
  echo -e "${blue}===========================================${NC}"
  echo -e "${grey}\n ${NC}"
  rm -rf /tmp/runningVMS
  su mimic -c "ssh $ROBOT-h1 'vboxmanage list runningvms'" > /tmp/runningVMS

  if grep -q myrobot-win "/tmp/runningVMS"; then
    echo "VM already running"
  else
    echo "starting VM..."
    su mimic -c "ssh $ROBOT-h1 'export DISPLAY=:0 && virtualbox --startvm myrobot-win --fullscreen'"&
  fi
}

sub_stop_gui(){
  echo -e "${blue}===========================================${NC}"
  echo "Stopping the Windows VM..."
  echo -e "${blue}===========================================${NC}"
  echo -e "${grey}\n ${NC}"
  su mimic -c "ssh -o ConnectTimeout=15 $ROBOT-h1 'export DISPLAY=:0 && vboxmanage controlvm myrobot-win acpipowerbutton'"
}

##### PARSE OPTIONS AND ARGUMENTS #####

verbose=false
all=false
subcommand=$1
lock_core=true
lock_slack=true
unset PID

case $subcommand in
  "" | "-h" | "--help" | "help" | " ")
  sub_help
  exit 1
  ;;
  *)shift
    option=$1
    case $option in
    "-v" | "--verbose") shift
    verbose=true
    ;;
    "-a" | "--all") shift
    all=true
    ;;
    *)
    esac
esac

sub_${subcommand} $@
if [ $? = 127 ]; then
  echo "Error: '$subcommand' is not a known subcommand." >&2
  exit 1
fi
